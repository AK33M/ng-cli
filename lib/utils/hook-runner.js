// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Helpers, HookRunner, Promise, helpers, _;

  Promise = require("bluebird");

  _ = require("lodash");

  Helpers = require("./helpers");

  helpers = new Helpers();

  HookRunner = (function() {
    function HookRunner() {}

    HookRunner.prototype.addChildren = function(index, identifier, dest) {
      var self;
      self = this;
      (index[identifier] || []).forEach(function(val) {
        dest.push({
          name: val.name,
          _init: val.init
        });
        self.addChildren(index, val.name, dest);
      });
    };

    HookRunner.prototype.runFromProccess = function(process_name) {
      var defer, dest, self;
      defer = Promise.defer();
      self = this;
      dest = [];
      helpers._getAppAddons(function(err, addons) {
        var proccess_hooks;
        if (err) {
          helpers._terminate(err);
        } else {
          if (_.size(addons.hooks) > 0) {
            proccess_hooks = _.filter(addons.hooks, function(hook) {
              return hook.hook_for === process_name;
            });
            if (_.size(proccess_hooks) > 0) {
              self.addChildren(_.groupBy(proccess_hooks, "after"), void 0, dest);
              return defer.resolve(dest);
            } else {
              defer.reject({
                "warn": "0 hooks for " + process_name
              });
            }
          } else {
            defer.reject({
              "warn": "0 hooks for " + process_name
            });
          }
        }
      });
      return defer.promise;
    };

    HookRunner.prototype.executeHooks = function(args, hooks) {
      var defer;
      defer = Promise.defer();
      helpers._getNgConfig(function(err, config) {
        var hooks_methods, x;
        if (err) {
          return defer.reject(err);
        } else {
          x = 0;
          hooks_methods = _.map(hooks, function(val) {
            return val._init;
          });
          return Promise.reduce(hooks_methods, function(output, process) {
            helpers.lineup.action.success("executing", "hook " + hooks[x].name);
            x++;
            return process(config, args);
          }, 0).then(function(final_output) {
            return defer.resolve(final_output);
          })["catch"](function(err) {
            return defer.reject(err);
          });
        }
      });
      return defer.promise;
    };

    return HookRunner;

  })();

  module.exports = HookRunner;

}).call(this);
