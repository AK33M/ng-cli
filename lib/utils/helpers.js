// Generated by CoffeeScript 1.8.0
(function() {
  var Helpers, Lineup, findup, fs, lineup, ncp, path, shelljs, _;

  findup = require("findup");

  path = require("path");

  Lineup = require("lineup");

  lineup = new Lineup();

  fs = require("fs");

  _ = require("lodash");

  shelljs = require("shelljs");

  ncp = require("ncp").ncp;

  Helpers = (function() {
    function Helpers() {
      this.commands = [];
      this.hooks = [];
      this.tasks = [];
    }

    Helpers.prototype.lineup = lineup;


    /**
      @method _terminate
      @param error {object} Error object to console
      @description Prints error and terminates process
     */

    Helpers.prototype._terminate = function(error) {
      if (error.trace) {
        lineup.log.error(error.message, {
          trace: error.trace
        });
      } else {
        lineup.log.error(error);
      }
      return process.exit(1);
    };


    /**
      @method clone
      @param name {String} Name of directory to clone
      @param toPath {String} Where to clone
      @param cb {Function} Callback to fire
      @description Clones directories from content dir to specified path
     */

    Helpers.prototype.clone = function(name, toPath, cb) {
      var self;
      self = this;
      shelljs.exec("git clone " + name + " " + toPath, function(code, output) {
        if (code === 0) {
          cb(null, 'cloned');
        } else {
          self._terminate(output);
        }
      });
    };


    /**
      @method _getNgConfig
      @param cb {Function} Callback to fire
      @description Reads and return ngConfig as object
     */

    Helpers.prototype._getNgConfig = function(cb) {
      var self;
      self = this;
      return findup(process.cwd(), 'ngconfig.json', function(err, dir) {
        var config_object, config_path, e, error_string;
        if (err) {
          error_string = {
            message: 'Unable to find ngconfig.json , make sure you are inside ngcli project',
            trace: {
              err: err
            }
          };
          self._terminate(error_string);
        } else {
          config_path = path.join(dir, 'ngconfig.json');
          config_object = fs.readFileSync(config_path);
          try {
            return config_object = JSON.parse(config_object.toString());
          } catch (_error) {
            e = _error;
            error_string = {
              message: 'Unable to read ngconfig.json, possibily a corrupt file',
              trace: {
                err: err
              }
            };
            self._terminate(error_string);
          } finally {
            cb(null, config_object);
          }
        }
      });
    };

    Helpers.prototype.checkForOldApp = function(cb) {
      var self;
      self = this;
      findup(process.cwd(), 'package.json', function(err, dir) {
        var error_string, isOldApp, upgrade_link;
        if (err) {
          error_string = {
            message: 'Unable to find package.json , make sure you are inside ngcli project',
            trace: {
              err: err
            }
          };
          self._terminate(error_string);
        } else {
          isOldApp = path.join(dir, 'node_modules/ng-browserify-transform/index.js');
          if (fs.existsSync(isOldApp)) {
            upgrade_link = self.lineup.colors.underline("http://amanvirk.me");
            self.lineup.sticker.note(self.lineup.colors.yellow("You are running deprecated version of ngCli"));
            self.lineup.sticker.note(self.lineup.colors.bgBlack.white("Visit " + upgrade_link + " to upgrade your app structure"));
            self.lineup.sticker.show();
            process.exit(1);
          } else {
            return cb();
          }
        }
      });
    };


    /**
      @method _getAppAddons
      @param cb {Function} Callback to fire
      @description Reads and return app addons from package.json file
     */

    Helpers.prototype._getAppAddons = function(cb) {
      var self;
      self = this;
      if (_.size(self.hooks) > 0 || _.size(self.tasks) > 0 || _.size(self.commands) > 0) {
        cb(null, {
          hooks: self.hooks,
          tasks: self.tasks,
          commands: self.commands
        });
      } else {
        findup(process.cwd(), 'package.json', function(err, dir) {
          var error_string, ngAddons, package_file, pckg_json;
          if (err) {
            error_string = {
              message: 'Unable to find package.json , make sure you are inside ngcli project',
              trace: {
                err: err
              }
            };
            self._terminate(error_string);
          } else {
            package_file = path.join(dir, 'package.json');
            pckg_json = require(package_file);
            ngAddons = pckg_json["ng-addons"];
            if (_.size(ngAddons) > 0) {
              _.each(ngAddons, function(value, key) {
                var addon, addon_path;
                if (value.indexOf('/') > -1) {
                  addon_path = path.join(dir, value);
                } else {
                  addon_path = path.join(dir, "/node_modules/" + value);
                }
                addon = require(addon_path);
                if (addon.hooks) {
                  self.hooks.push(addon.hooks);
                }
                if (addon.tasks) {
                  self.tasks.push(addon.tasks);
                }
                if (addon.commands) {
                  return self.commands.push(addon.commands);
                }
              });
              cb(null, {
                hooks: _.flatten(self.hooks),
                tasks: _.flatten(self.tasks),
                commands: _.flatten(self.commands)
              });
            } else {
              cb('0 configured addons', null);
            }
          }
        });
      }
    };

    return Helpers;

  })();

  module.exports = Helpers;

}).call(this);
