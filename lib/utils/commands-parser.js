// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var BundledCommands, CommandsParser, Helpers, HookRunner, bundledcommands, helpers, hookrunner, nomnom, path, _;

  Helpers = require("./helpers");

  helpers = new Helpers();

  HookRunner = require("./hook-runner");

  hookrunner = new HookRunner();

  BundledCommands = require("./bundled-commands");

  bundledcommands = new BundledCommands();

  _ = require("lodash");

  nomnom = require("nomnom");

  path = require("path");


  /**
    @class CommandsParser
    @description Parse commands and run supporting process on them.
   */

  CommandsParser = (function() {
    function CommandsParser() {}


    /**
      @method autoRun
      @param cb {function} Callback
      @description Parse and run dynamic commands registered by addons
     */

    CommandsParser.prototype.autoRun = function(cb) {
      var self;
      self = this;
      helpers._getAppAddons(function(err, addons) {
        if (err) {
          if (cb) {
            return cb();
          } else {
            return helpers._terminate(err);
          }
        } else {
          _.each(addons.commands, function(cmd) {
            var command;
            command = nomnom.command(cmd.name);
            _.each(cmd.options, function(value, key) {
              var options;
              options = {};
              options.required = value.required || false;
              options.flag = value.flag || false;
              if (value.position) {
                options.position = value.position;
              }
              command.option(key, options);
            });
            command.callback(function(options) {
              self.runHooks(options, cmd.name);
            });
            command.help(cmd.description);
          });
          if (cb) {
            cb();
            return;
          } else {
            nomnom.parse();
            return;
          }
        }
      });
    };


    /**
      @method runBundled
      @param cb {function} Callback
      @description Parse and run bundled commands
     */

    CommandsParser.prototype.runBundled = function() {

      /*
        All good . OK . Tested
       */
      var self;
      self = this;
      nomnom.command("new").option("name", {
        required: true,
        position: 1,
        help: "project name"
      }).callback(function(options) {
        bundledcommands.newApp(options);
      }).help("Create new ngCli project");

      /*
        All good . OK . Tested
       */
      self = this;
      nomnom.command("test").option("watch", {
        flag: true,
        help: "watch for changes in test files"
      }).callback(function(options) {
        bundledcommands.karmaStart(options);
      }).help("Run karma unit tests");

      /*
        All good . OK . Tested
       */
      nomnom.command("install").option("name", {
        required: true,
        position: 1,
        help: "name of the hook you want to install"
      }).callback(function(options) {
        bundledcommands.installAddon(options);
      }).help("Install ng hooks from npm");

      /*
        All good . OK . Tested
       */
      nomnom.command("build").callback(function(options) {
        bundledcommands.buildApp(options);
      }).help("Build source files");

      /*
        All good . OK . Tested
       */
      nomnom.command("addon").option("name", {
        required: true,
        position: 1,
        help: "name of the addon you want to create"
      }).callback(function(options) {
        bundledcommands.addon(options);
      }).help("Scaffold ng addon");

      /*
        All good . OK . Tested
       */
      nomnom.command("serve").callback(function(options) {
        bundledcommands.serveApp(options);
      }).help("Add watcher to build source files on every change");

      /*
        All good . OK . Tested
       */
      nomnom.command("version").callback(function() {
        var pck;
        pck = require(path.join(__dirname, "../../package.json"));
        console.log("Version " + pck.version);
      }).help("ngCli version");
      nomnom.parse();
    };


    /**
      @method runHooks
      @param options {object} CLI arguments
      @param process_name {String} Command name
      @description Run hooks attached to passed command
     */

    CommandsParser.prototype.runHooks = function(options, process_name) {
      hookrunner.runFromProccess(process_name).then(function(hooks) {
        return hookrunner.executeHooks(options, hooks);
      }).then(function(output) {
        return console.log(output);
      })["catch"](function(err) {
        return console.log(err);
      });
    };

    return CommandsParser;

  })();

  module.exports = CommandsParser;

}).call(this);
